/*
 * Su Doku Solver
 * 
 * Copyright (C) act365.com November 2004
 * 
 * Web site: http://act365.com/sudoku
 * E-mail: developers@act365.com
 * 
 * The Su Doku Solver solves Su Doku problems - see http://www.sudoku.com.
 * 
 * This program is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the Free 
 * Software Foundation; either version 2 of the License, or (at your option) 
 * any later version.
 *  
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with 
 * this program; if not, write to the Free Software Foundation, Inc., 
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package com.act365.sudoku;

/**
 * A strategy is an algorithm that solves Su Doku problems. At each timestep,
 * a strategy has to calculate a 'best' move (x,y):=z, which means that it will
 * almost certainly choose to iterate over a three-dimensional space. Most
 * strategies follow a least-candidates principle, which means that they will 
 * iterate over two dimensions (not necessarily x and y - any two abstract
 * dimensions of the solver's choice will do) and select the value that gives 
 * rise to the smallest number of candidates in the third dimension.  
 */

public interface IStrategy {
	
	/**
	 * Sets up the strategy state variables to solve the given grid.
     * @param grid grid to be solved
	 */
	
	public void setup( Grid grid ) throws Exception ;
	
	/**
	 * Finds a set of candidates for the next move. The candidates 
     * are stored internally to be accessed by the functions getXCandidates(),
     * getYCandidates() and getValueCandidates(). The function does 
     * not alter the grid or the stack. 
     * The 'score' is set to signal the confidence in the candidates.
	 * @return number of candidates
     * @see IStrategy#getXCandidate(int)
     * @see IStrategy#getYCandidate(int)
     * @see IStrategy#getValueCandidate(int)
     * @see IStrategy#getReasonCandidate(int)
	 */
	
    public int findCandidates();
    
    /**
     * Returns a measure of the confidence the strategy has in its candidates.
     */
    
    public int getScore();
    
    /**
     * Selects a single candidate from the set generated by findCandidates(),
     * which it stores internally to be accessed by the functions getBestX(),
     * getBestY() and getBestValue().
     * @see IStrategy#findCandidates()
     * @see IStrategy#getBestX()
     * @see IStrategy#getBestY()
     * @see IStrategy#getBestValue() 
     * @see IStrategy#getBestReason()
     */
    
    public void selectCandidate();
    
	/**
	 * Sets the move chosen by selectCandidate() in the grid.
     * @see IStrategy#selectCandidate()  
	 */

	public void setCandidate();

    /**
     * Tells the strategy to update its internal state variables to account
     * for the move (x,y):= value. 
     * @param writeState whether the updated state should be written to the stack 
     */

    public boolean updateState( int x , int y , int value , String reason , boolean writeState ) throws Exception ;
    
    /**
     * Unwinds the most recent move and reverts the state grids.
     * @param newNMoves the point to which the stack should unwind
     * @param reset whether to erase intervening moves from the grid
     * @param eliminate whether the move at the unwind point should be eliminated from the state grids
     * @return whether further moves remain that could be unwound 
     */
    
    public boolean unwind( int newNMoves , boolean reset , boolean eliminate );	
    
    /**
     * Resets the grid to its state before the strategy had been invoked.
     */
    
    public void reset();
    
    /**
     * Resets the grid to its state before the given move.
     */
    
    public void reset( int move );
    
    /**
     * Returns the x-coordinate of the best candidate move.
     */
    
    public int getBestX();
        
    /**
     * Returns the y-coordinate of the best candidate move.
     */
    
    public int getBestY();
        
    /**
     * Returns the value of the best candidate move.
     */
    
    public byte getBestValue();
    
    /**
     * Returns the reason behind the best candidate move.
     */
    
    public String getBestReason();
    
    /**
     * Returns the number of candidates generated by findCandidates().
     * @see IStrategy#findCandidates()
     */
    
    public int getNumberOfCandidates();
    
    /**
     * Returns the x-coordinates of the candidates generated by findCandidates().
     * @see IStrategy#findCandidates()
     */
    
    public int getXCandidate( int n );
    
    /**
     * Returns the y-coordinates of the candidates generated by findCandidates().
     * @see IStrategy#findCandidates()
     */
    
    public int getYCandidate( int n );
    
    /**
     * Returns the value-coordinates of the candidates generated by findCandidates().
     * @see IStrategy#findCandidates()
     */
    
    public byte getValueCandidate( int n );
    
    /**
     * Returns the reason behind the candidate generated by findCandidates().
     * @see IStrategy#findCandidates()
     */
    
    public String getReasonCandidate( int n );
    
    /**
     * Returns the number of moves stored on the thread.
     */
    
    public int getThreadLength();
    
    /**
     * Returns the x-coordinate of the move at the given thread position.
     */
    
    public int getThreadX( int move );
    
    /**
     * Returns the y-coordinate of the move at the given thread position.
     */
    
    public int getThreadY( int move );
    
    /**
     * Returns all the reasoning behind the thread.
     */

    public String getReason( int move );
    
    /**
     * Indicates whether the strategy explains its reasoning.
     */
    
    public boolean explainsReasoning();
    
    /**
     * Returns the number of moves made at the last point where two 
     * or more alternatives had existed. 
     */

    public int getLastWrittenMove();
    
    /**
     * Lists the moves in the current thread.
     */
    
    public String toString();
}
